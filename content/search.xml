<?xml version="1.0"?>
<!-- ***** BEGIN LICENSE BLOCK *****
Version: MPL 1.1/GPL 2.0/LGPL 2.1

The contents of this file are subject to the Mozilla Public License Version
1.1 (the "License"); you may not use this file except in compliance with
the License. You may obtain a copy of the License at
http://www.mozilla.org/MPL/

Software distributed under the License is distributed on an "AS IS" basis,
WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
for the specific language governing rights and limitations under the
License.

The Original Code is Organize Search Engines.

The Initial Developer of the Original Code is
Malte Kraus.
Portions created by the Initial Developer are Copyright (C) 2009
the Initial Developer. All Rights Reserved.

Contributor(s):
  Malte Kraus <mails@maltekraus.de> (Original author)

 Alternatively, the contents of this file may be used under the terms of
 either the GNU General Public License Version 2 or later (the "GPL"), or
 the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 in which case the provisions of the GPL or the LGPL are applicable instead
 of those above. If you wish to allow use of your version of this file only
 under the terms of either the GPL or the LGPL, and not to allow others to
 use your version of this file under the terms of the MPL, indicate your
 decision by deleting the provisions above and replace them with the notice
 and other provisions required by the GPL or the LGPL. If you do not delete
 the provisions above, a recipient may use your version of this file under
 the terms of any one of the MPL, the GPL or the LGPL.
***** END LICENSE BLOCK ***** -->
<!DOCTYPE bindings [
<!ENTITY % searchBarDTD SYSTEM "chrome://browser/locale/searchbar.dtd" >
%searchBarDTD;
<!ENTITY % browserDTD SYSTEM "chrome://browser/locale/browser.dtd">
%browserDTD;
]> 
<bindings id="OrganizedSearchBindings" xmlns="http://www.mozilla.org/xbl"
			xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
			xmlns:xbl="http://www.mozilla.org/xbl"
			>

<binding id="searchbar">
    <resources>
      <stylesheet src="chrome://browser/content/search/searchbarBindings.css"/>
      <stylesheet src="chrome://browser/skin/searchbar.css"/>
    </resources>
    <content>
      <xul:stringbundle src="chrome://browser/locale/search.properties"
                        anonid="searchbar-stringbundle"/>

      <xul:textbox class="searchbar-textbox"
                   anonid="searchbar-textbox"
                   type="autocomplete"
                   flex="1"
                   autocompletepopup="PopupAutoComplete"
                   autocompletesearch="search-autocomplete"
                   autocompletesearchparam="searchbar-history"
                   maxrows="10"
                   completeselectedindex="true"
                   showcommentcolumn="true"
                   tabscrolling="true"
                   xbl:inherits="disabled,disableautocomplete,searchengine,src,newlines">

        <xul:box>
          <xul:toolbarbutton class="searchbar-engine-button"
                      type="menu"
                      anonid="searchbar-engine-button">
            <xul:image class="searchbar-engine-image" xbl:inherits="src"/>
            <xul:image class="searchbar-dropmarker-image"/>
            <xul:menupopup class="searchbar-popup"
                           anonid="searchbar-popup">
              <xul:menuseparator/>
              <xul:menuitem class="open-engine-manager"
                            anonid="open-engine-manager"
                            label="&cmd_engineManager.label;"
                            oncommand="openManager(event);"/>
            </xul:menupopup>
          </xul:toolbarbutton>
        </xul:box>
        <xul:hbox class="search-go-container">
          <xul:image class="search-go-button"
                     anonid="search-go-button"
                     onclick="handleSearchCommand(event);"
                     tooltiptext="&searchEndCap.label;"/>
        </xul:hbox>
      </xul:textbox>
    </content>

    <implementation implements="nsIObserver">

	<constructor><![CDATA[
	    if (this.parentNode.parentNode.localName == "toolbarpaletteitem")
          return;
        // Make sure we rebuild the popup in onpopupshowing
        this._needToBuildPopup = true;
        var os =
               Components.classes["@mozilla.org/observer-service;1"]
                         .getService(Components.interfaces.nsIObserverService);
        os.addObserver(this, "browser-search-engine-modified", false);
        this._initialized = true;
        this.searchService.init((function search_init_cb(aStatus) {
          // Bail out if the binding's been destroyed
          if (!this._initialized)
            return;
          if (Components.isSuccessCode(aStatus)) {
            // Refresh the display (updating icon, etc)
            this.updateDisplay();
          } else {
            Components.utils.reportError("Cannot initialize search service, bailing out: " + aStatus);
          }
        }).bind(this));

		this.searchButton.setAttribute("popup", "search-popup");
        if("organizeSE" in window && organizeSE.extensions)
          organizeSE.customizeToolbarListener();
        var popup = document.getAnonymousElementByAttribute(this, "anonid", "searchbar-popup");
        // searchOnTab needs it, so let the popup stay around when it's there
        if(popup && popup.parentNode)
        {
          if("searchOnTab" in window)
          {
            let This = this;
            this.searchButton.addEventListener("click", function(event) {
              event.preventDefault();
              This._textbox.openSearch();
              return false;
            }, false);
          }
          else
          {
            popup.parentNode.removeChild(popup);
          }
        }
		this.rebuildPopup();
		
      ]]></constructor>

      <destructor><![CDATA[
        this.destroy();
      ]]></destructor>

      <method name="destroy">
        <body><![CDATA[
        if (this._initialized) {
          this._initialized = false;

          var os = Components.classes["@mozilla.org/observer-service;1"]
                             .getService(Components.interfaces.nsIObserverService);
          os.removeObserver(this, "browser-search-engine-modified");
        }

        // Make sure to break the cycle from _textbox to us. Otherwise we leak
        // the world. But make sure it's actually pointing to us.
        // Also make sure the textbox has ever been constructed, otherwise the
        // _textbox getter will cause the textbox constructor to run, add an
        // observer, and leak the world too.
        if (this._textboxInitialized && this._textbox.mController.input == this)
          this._textbox.mController.input = null;
        ]]></body>
      </method>
	  
	  <!-- 'openSuggestionsPanel' method will always be triggered by Fx, if ALT key + Up/Down
		gets hit, no matter whether the search bar binding gets overriden or not. In this case
		the search engine buttons menupopup has to be opened instead of the search panel, because
		this CTR option 'restores' it.
	  -->
      <method name="openSuggestionsPanel">
        <body><![CDATA[
		  var mainWindow = window.QueryInterface(Components.interfaces.nsIInterfaceRequestor)
                       .getInterface(Components.interfaces.nsIWebNavigation)
                       .QueryInterface(Components.interfaces.nsIDocShellTreeItem)
                       .rootTreeItem
                       .QueryInterface(Components.interfaces.nsIInterfaceRequestor)
                       .getInterface(Components.interfaces.nsIDOMWindow);
		  var searchbar = mainWindow.document.getElementById("searchbar");
		  var searchBox = mainWindow.document.getAnonymousElementByAttribute(searchbar, "anonid", "searchbar-textbox");
		  var searchBut = searchBox.firstChild.firstChild;
		  searchBut.open = true;

        ]]></body>
      </method>

      <field name="_stringBundle">document.getAnonymousElementByAttribute(this,
          "anonid", "searchbar-stringbundle");</field>
      <field name="_textboxInitialized">false</field>
      <field name="_textbox">document.getAnonymousElementByAttribute(this,
          "anonid", "searchbar-textbox");</field>

      <field name="_popup">document.getAnonymousElementByAttribute(this,
          "anonid", "searchbar-popup");</field>

		  <property name="_popup" readonly="true">
        <getter><![CDATA[
          return document.getElementById("search-popupset").lastChild;
        ]]></getter>
      </property>

      <field name="_ss">null</field>
      <field name="_engines">null</field>
      <field name="FormHistory" readonly="true">
        (Components.utils.import("resource://gre/modules/FormHistory.jsm", {})).FormHistory;
      </field>
      <field name="PlacesUtils" readonly="true">
        (Components.utils.import("resource://gre/modules/PlacesUtils.jsm", {})).PlacesUtils;
      </field>

      <property name="engines" readonly="true">
        <getter><![CDATA[
          if (!this._engines)
            this._engines = this.searchService.getVisibleEngines();
          return this._engines;
        ]]></getter>
      </property>

      <field name="searchButton">document.getAnonymousElementByAttribute(this,
          "anonid", "searchbar-engine-button");</field>

      <property name="currentEngine">
        <setter><![CDATA[
          let ss = this.searchService;
          ss.defaultEngine = ss.currentEngine = val;
          return val;
        ]]></setter>
        <getter><![CDATA[
          var currentEngine = this.searchService.currentEngine;
          // Return a dummy engine if there is no currentEngine
          return currentEngine || {name: "", uri: null};
        ]]></getter>
      </property>

      <property name="textbox" readonly="true"
                onget="return this._textbox;"/>

      <property name="searchService" readonly="true">
        <getter><![CDATA[
          if (!this._ss) {
            const nsIBSS = Components.interfaces.nsIBrowserSearchService;
            this._ss =
                 Components.classes["@mozilla.org/browser/search-service;1"]
                           .getService(nsIBSS);
          }
          return this._ss;
        ]]></getter>
      </property>

      <property name="value" onget="return this._textbox.value;"
                             onset="return this._textbox.value = val;"/>

      <method name="focus">
        <body><![CDATA[
          this._textbox.focus();
        ]]></body>
      </method>

      <method name="select">
        <body><![CDATA[
          this._textbox.select();
        ]]></body>
      </method>

      <field name="_rebuildTimer" />
      <method name="observe">
        <parameter name="aEngine"/>
        <parameter name="aTopic"/>
        <parameter name="aVerb"/>
        <body><![CDATA[
          if(aTopic != "browser-search-engine-modified")
            return;

          if(aEngine)
            aEngine = aEngine.wrappedJSObject;
          if(aVerb == "engine-changed" && (!aEngine ||
             aEngine.__action == "alias" || aEngine.__action == "update")) {
            return; // ignore
          }

          if(aVerb == "engine-removed" || (aVerb == "engine-changed" &&
             aEngine.__action == "hidden" && aEngine.hidden)) {
            this._popup.hidePopup();
            this.offerNewEngine(aEngine);
            this._engines = null; // empty cache
            this.updateDisplay(); // maybe the current engine was removed
          } else if(aVerb == "engine-added" || (aVerb == "engine-changed" &&
                    aEngine.__action == "hidden" && !aEngine.hidden)) {
            if(!("innerEngines" in aEngine))
              this._popup.hidePopup();
            this._engines = null; // empty cache
            this.hideNewEngine(aEngine);
          } else if(aVerb == "engine-current" ||
                    (aVerb == "engine-changed" && ["icon", "name"].indexOf(aEngine.__action) != -1)) {
            this._popup.hidePopup();
            this.updateDisplay();
          } else if(aVerb == "-engines-organized") {
            this._popup.hidePopup();
            this.updateDisplay();
            if("oDenDZones_Observer" in window)
              window.setTimeout(function() { oDenDZones_Observer.observe(); }, 0);
          } else if(aVerb == "engine-changed" && aEngine.__action == "move") {
            this._engines = null; // empty cache
          }

          // lazily rebuild the popup in case of many notifications at once
          if(this._rebuildTimer)
            window.clearTimeout(this._rebuildTimer);
          this._rebuildTimer = window.setTimeout(function(This) {
            This._popup.hidePopup();
            This.rebuildPopup();
            This._rebuildTimer = null;
          }, 100, this);
        ]]></body>
      </method> 
-->
      <method name="offerNewEngine">
        <parameter name="aEngine"/>
        <body><![CDATA[
          for (let browser of gBrowser.browsers) {
            if (browser.hiddenEngines) {
              // XXX This will need to be changed when engines are identified by
              // URL rather than title; see bug 335102.
              var removeTitle = aEngine.wrappedJSObject.name;
              for (var i = 0; i < browser.hiddenEngines.length; i++) {
                if (browser.hiddenEngines[i].title == removeTitle) {
                  if (!browser.engines)
                    browser.engines = [];
                  browser.engines.push(browser.hiddenEngines[i]);
                  browser.hiddenEngines.splice(i, 1);
                  break;
                }
              }
            }
          }
          BrowserSearch.updateSearchButton();
        ]]></body>
      </method>

      <method name="hideNewEngine">
        <parameter name="aEngine"/>
        <body><![CDATA[
          for (let browser of gBrowser.browsers) {
            if (browser.engines) {
              // XXX This will need to be changed when engines are identified by
              // URL rather than title; see bug 335102.
              var removeTitle = aEngine.wrappedJSObject.name;
              for (var i = 0; i < browser.engines.length; i++) {
                if (browser.engines[i].title == removeTitle) {
                  if (!browser.hiddenEngines)
                    browser.hiddenEngines = [];
                  browser.hiddenEngines.push(browser.engines[i]);
                  browser.engines.splice(i, 1);
                  break;
                }
              }
            }
          }
          BrowserSearch.updateSearchButton();
        ]]></body>
      </method>

      <method name="setIcon">
        <parameter name="element"/>
        <parameter name="uri"/>
        <body><![CDATA[
          if (uri) {
            //uri = this.PlacesUtils.getImageURLForResolution(window, uri);
          }
          element.setAttribute("src", uri);
        ]]></body>
      </method>

      <method name="updateDisplay">
        <body><![CDATA[
          var uri = this.currentEngine.iconURI;
          this.setIcon(this, uri ? uri.spec : "");

          var name = this.currentEngine.name;
          var text = this._stringBundle.getFormattedString("searchtip", [name]);

          this._textbox.placeholder = name;

          this._textbox.label = text;
          this._textbox.tooltipText = text;
        ]]></body>
      </method>

      <method name="rebuildPopupDynamic">
        <body><![CDATA[
          // We might not have added the main popup items yet, do that first
          // if needed.
          if (this._needToBuildPopup)
            this.rebuildPopup();

          var popup = this._popup;
          // Clear any addengine menuitems, including addengine-item entries and
          // the addengine-separator.  Work backward to avoid invalidating the
          // indexes as items are removed.
          var items = popup.childNodes;
          for (var i = items.length - 1; i >= 0; i--) {
            if (items[i].classList.contains("addengine-item") ||
                items[i].classList.contains("addengine-separator"))
              popup.removeChild(items[i]);
          }

          var addengines = gBrowser.selectedBrowser.engines;
          if (addengines && addengines.length > 0) {
            const kXULNS =
               "http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul";

            // Find the (first) separator in the remaining menu, or the first item
            // if no separators are present.
            var insertLocation = popup.firstChild;
            while (insertLocation.nextSibling &&
                   insertLocation.localName != "menuseparator") {
              insertLocation = insertLocation.nextSibling;
            }
            if (insertLocation.localName != "menuseparator")
              insertLocation = popup.firstChild;

            var separator = document.createElementNS(kXULNS, "menuseparator");
            separator.setAttribute("class", "addengine-separator");
            popup.insertBefore(separator, insertLocation);

            // Insert the "add this engine" items.
            for (var i = 0; i < addengines.length; i++) {
              var menuitem = document.createElement("menuitem");
              var engineInfo = addengines[i];
              var labelStr =
                  this._stringBundle.getFormattedString("cmd_addFoundEngine",
                                                        [engineInfo.title]);
              menuitem = document.createElementNS(kXULNS, "menuitem");
              menuitem.setAttribute("class", "menuitem-iconic addengine-item");
              menuitem.setAttribute("label", labelStr);
              menuitem.setAttribute("tooltiptext", engineInfo.uri);
              menuitem.setAttribute("uri", engineInfo.uri);
              if (engineInfo.icon)
                this.setIcon(menuitem, engineInfo.icon);
              menuitem.setAttribute("title", engineInfo.title);
              popup.insertBefore(menuitem, insertLocation);
            }
          }
        ]]></body>
      </method>
	  
	  <property name="rebuildPopupDynamic" readonly="true" onget="return this.rebuildPopup;"/>

      <method name="rebuildPopup">
        <body><![CDATA[
          var popup = this._popup;

          // Clear the popup, down to the first separator
          while (popup.firstChild && popup.firstChild.localName != "menuseparator")
            popup.removeChild(popup.firstChild);

          const kXULNS =
               "http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul";

          var engines = this.engines;
          for (var i = engines.length - 1; i >= 0; --i) {
            var menuitem = document.createElementNS(kXULNS, "menuitem");
            var name = engines[i].name;
            menuitem.setAttribute("label", name);
            menuitem.setAttribute("class", "menuitem-iconic searchbar-engine-menuitem menuitem-with-favicon");
            // Since this menu is rebuilt by the observer method whenever a new
            // engine is selected, the "selected" attribute does not need to be
            // explicitly cleared anywhere.
            if (engines[i] == this.currentEngine)
              menuitem.setAttribute("selected", "true");
            var tooltip = this._stringBundle.getFormattedString("searchtip", [name]);
            menuitem.setAttribute("tooltiptext", tooltip);
            if (engines[i].iconURI)
              this.setIcon(menuitem, engines[i].iconURI.spec);
            popup.insertBefore(menuitem, popup.firstChild);
            menuitem.engine = engines[i];
          }

          this._needToBuildPopup = false;
        ]]></body>
      </method>
 
	  <method name="rebuildPopup">
		<body>
			document.getElementById("search-popupset").builder.rebuild();
		</body>
	  </method>

      <method name="openManager"><body><![CDATA[
        organizeSE.popup.hidePopup();

        var url = "chrome://browser/content/search/engineManager.xul";
        var features = "chrome,modal,centerscreen,resizable,all,dialog,toolbar";
        toOpenWindowByType("Browser:SearchManager", url, features);
      ]]></body></method>

      <method name="selectEngine">
        <parameter name="aEvent"/>
        <parameter name="isNextEngine"/>
        <body><![CDATA[
          // Find the new index
          var newIndex = this.engines.indexOf(this.currentEngine);
          newIndex += isNextEngine ? 1 : -1;

          if (newIndex >= 0 && newIndex < this.engines.length) {
            this.currentEngine = this.engines[newIndex];
          }

          aEvent.preventDefault();
          aEvent.stopPropagation();

        ]]></body>
      </method>

      <method name="handleSearchCommand">
        <parameter name="aEvent"/>
        <parameter name="aEngine"/>
        <body><![CDATA[
          var textBox = this._textbox;
          var textValue = textBox.value;

          var where = "current";
		  
		  Components.utils.import("resource://gre/modules/Services.jsm", {})
		  
		  // force search to open in a new tab, if the corresponding browser preference it active
		  try {
			if(Services.prefs.getBranch("browser.search.").getBoolPref("openintab"))
			  where = "tab";
		  } catch(e) {}

          // Open ctrl/cmd clicks on one-off buttons in a new background tab.
          if (aEvent && aEvent.originalTarget.getAttribute("anonid") == "search-go-button") {
            if (aEvent.button == 2)
              return;
            where = whereToOpenLink(aEvent, false, true);
          }
          else {
            if ((aEvent instanceof KeyboardEvent) && aEvent.altKey)
              where = "tab";
            if ((aEvent instanceof MouseEvent) && (aEvent.button == 1 ||
                                                   aEvent.ctrlKey))
              where = "tab-background";
          }
		  
          this.doSearch(textValue, where, aEngine);

          if (where == "tab-background")
            this.focus();
        ]]></body>
      </method>

      <method name="doSearch">
        <parameter name="aData"/>
        <parameter name="aWhere"/>
        <parameter name="aEngine"/>
        <body><![CDATA[
          var textBox = this._textbox;

          // Save the current value in the form history
          if (aData && !PrivateBrowsingUtils.isWindowPrivate(window)) {
            this.FormHistory.update(
              { op : "bump",
                fieldname : textBox.getAttribute("autocompletesearchparam"),
                value : aData },
              { handleError : function(aError) {
                  Components.utils.reportError("Saving search to form history failed: " + aError.message);
              }});
          }

          let engine = aEngine || this.currentEngine;
          var submission = engine.getSubmission(aData, null, "searchbar");

          // null parameter below specifies HTML response for search
          let params = {
            postData: submission.postData,
            inBackground: aWhere == "tab-background"
          };
          openUILinkIn(submission.uri.spec,
                       aWhere == "tab-background" ? "tab" : aWhere,
                       params);
        ]]></body>
      </method>

      <method name="doSearch">
        <body><![CDATA[
          organizeSE.doSearch.apply(organizeSE, arguments)
        ]]></body>
      </method>
	  
    </implementation>
    
	<handlers>
      <handler event="command"><![CDATA[
        const target = event.originalTarget;
        if (target.engine) {
          this.currentEngine = target.engine;
        } else if (target.classList.contains("addengine-item")) {
          var searchService =
            Components.classes["@mozilla.org/browser/search-service;1"]
                      .getService(Components.interfaces.nsIBrowserSearchService);
          // We only detect OpenSearch files
          var type = Components.interfaces.nsISearchEngine.DATA_XML;
          // Select the installed engine if the installation succeeds
          var installCallback = {
            onSuccess: engine => this.currentEngine = engine
          }
          searchService.addEngine(target.getAttribute("uri"), type,
                                  target.getAttribute("src"), false,
                                  installCallback);
        }
        else
          return;

        this.focus();
        this.select();
      ]]></handler>

      <handler event="popupshowing" action="this.rebuildPopupDynamic();"/>

      <handler event="DOMMouseScroll"
               phase="capturing"
               modifiers="accel"
               action="this.selectEngine(event, (event.detail > 0));"/>

      <handler event="focus">
      <![CDATA[
        // Speculatively connect to the current engine's search URI (and
        // suggest URI, if different) to reduce request latency
        this.currentEngine.speculativeConnect({window: window});
      ]]></handler>
    </handlers>
  </binding>
  
<binding id="searchbar-textbox"
      extends="chrome://global/content/bindings/autocomplete.xml#autocomplete">
    <implementation implements="nsIObserver">
      <constructor><![CDATA[
        const kXULNS =
          "http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul";

        if (document.getBindingParent(this).parentNode.parentNode.localName ==
            "toolbarpaletteitem")
          return;

        // Initialize fields
        this._stringBundle = document.getBindingParent(this)._stringBundle;
        this._prefBranch =
                  Components.classes["@mozilla.org/preferences-service;1"]
                            .getService(Components.interfaces.nsIPrefBranch);
        this._suggestEnabled =
            this._prefBranch.getBoolPref("browser.search.suggest.enabled");

        if (this._prefBranch.getBoolPref("browser.urlbar.clickSelectsAll"))
          this.setAttribute("clickSelectsAll", true);

        // Add items to context menu and attach controller to handle them
        var textBox = document.getAnonymousElementByAttribute(this,
                                              "anonid", "textbox-input-box");
        var cxmenu = document.getAnonymousElementByAttribute(textBox,
                                          "anonid", "input-box-contextmenu");
        var pasteAndSearch;
        cxmenu.addEventListener("popupshowing", function() {
          BrowserSearch.searchBar._textbox.closePopup();
          if (!pasteAndSearch)
            return;
          var controller = document.commandDispatcher.getControllerForCommand("cmd_paste");
          var enabled = controller.isCommandEnabled("cmd_paste");
          if (enabled)
            pasteAndSearch.removeAttribute("disabled");
          else
            pasteAndSearch.setAttribute("disabled", "true");
        }, false);

        var element, label, akey;

        element = document.createElementNS(kXULNS, "menuseparator");
        cxmenu.appendChild(element);

        this.setAttribute("aria-owns", this.popup.id);

        var insertLocation = cxmenu.firstChild;
        while (insertLocation.nextSibling &&
               insertLocation.getAttribute("cmd") != "cmd_paste")
          insertLocation = insertLocation.nextSibling;
        if (insertLocation) {
          element = document.createElementNS(kXULNS, "menuitem");
          label = this._stringBundle.getString("cmd_pasteAndSearch");
          element.setAttribute("label", label);
          element.setAttribute("anonid", "paste-and-search");
          element.setAttribute("oncommand", "BrowserSearch.pasteAndSearch(event)");
          cxmenu.insertBefore(element, insertLocation.nextSibling);
          pasteAndSearch = element;
        }

        element = document.createElementNS(kXULNS, "menuitem");
        label = this._stringBundle.getString("cmd_clearHistory");
        akey = this._stringBundle.getString("cmd_clearHistory_accesskey");
        element.setAttribute("label", label);
        element.setAttribute("accesskey", akey);
        element.setAttribute("cmd", "cmd_clearhistory");
        cxmenu.appendChild(element);

        element = document.createElementNS(kXULNS, "menuitem");
        label = this._stringBundle.getString("cmd_showSuggestions");
        akey = this._stringBundle.getString("cmd_showSuggestions_accesskey");
        element.setAttribute("anonid", "toggle-suggest-item");
        element.setAttribute("label", label);
        element.setAttribute("accesskey", akey);
        element.setAttribute("cmd", "cmd_togglesuggest");
        element.setAttribute("type", "checkbox");
        element.setAttribute("checked", this._suggestEnabled);
        element.setAttribute("autocheck", "false");
        this._suggestMenuItem = element;
        cxmenu.appendChild(element);

        this.controllers.appendController(this.searchbarController);
        document.getBindingParent(this)._textboxInitialized = true;

        // Add observer for suggest preference
        var prefs = Components.classes["@mozilla.org/preferences-service;1"]
                            .getService(Components.interfaces.nsIPrefBranch);
        prefs.addObserver("browser.search.suggest.enabled", this, false);
      ]]></constructor>

      <destructor><![CDATA[
          var prefs = Components.classes["@mozilla.org/preferences-service;1"]
                              .getService(Components.interfaces.nsIPrefBranch);
          prefs.removeObserver("browser.search.suggest.enabled", this);

        // Because XBL and the customize toolbar code interacts poorly,
        // there may not be anything to remove here
        try {
          this.controllers.removeController(this.searchbarController);
        } catch (ex) { }
      ]]></destructor>

      <field name="_stringBundle"/>
      <field name="_prefBranch"/>
      <field name="_suggestMenuItem"/>
      <field name="_suggestEnabled"/>

      <property name="searchParam"
                onget="return this.getAttribute('autocompletesearchparam') +
                       (PrivateBrowsingUtils.isWindowPrivate(window) ? '|private' : '');"
                onset="this.setAttribute('autocompletesearchparam', val); return val;"/>

      <method name="openPopup">
        <body><![CDATA[
          var popup = this.popup;
          if (!popup.mPopupOpen) {
            // Initially the panel used for the searchbar (PopupSearchAutoComplete
            // in browser.xul) is hidden to avoid impacting startup / new
            // window performance. The base binding's openPopup would normally
            // call the overriden openAutocompletePopup in urlbarBindings.xml's
            // browser-autocomplete-result-popup binding to unhide the popup,
            // but since we're overriding openPopup we need to unhide the panel
            // ourselves.
            popup.hidden = false;

            // Don't roll up on mouse click in the anchor for the search UI.
            if (popup.id == "PopupSearchAutoComplete") {
              popup.setAttribute("norolluponanchor", "true");
            }

            popup.mInput = this;
            popup.view = this.controller.QueryInterface(Components.interfaces.nsITreeView);
            popup.invalidate();

            popup.showCommentColumn = this.showCommentColumn;
            popup.showImageColumn = this.showImageColumn;

            document.popupNode = null;

            const isRTL = getComputedStyle(this, "").direction == "rtl";

            var outerRect = this.getBoundingClientRect();
            var innerRect = this.inputField.getBoundingClientRect();
            if (isRTL) {
              var width = innerRect.right - outerRect.left;
            } else {
              var width = outerRect.right - innerRect.left;
            }
            popup.setAttribute("width", width > 100 ? width : 100);

            var yOffset = outerRect.bottom - innerRect.bottom;
            popup.openPopup(this.inputField, "after_start", 0, yOffset, false, false);
          }
        ]]></body>
      </method>

      <method name="observe">
        <parameter name="aSubject"/>
        <parameter name="aTopic"/>
        <parameter name="aData"/>
        <body><![CDATA[
          if (aTopic == "nsPref:changed") {
            this._suggestEnabled =
              this._prefBranch.getBoolPref("browser.search.suggest.enabled");
            this._suggestMenuItem.setAttribute("checked", this._suggestEnabled);
          }
        ]]></body>
      </method>

      <method name="openSearch">
        <body>
          <![CDATA[
            // Don't open search popup if history popup is open
            if (!this.popupOpen) {
              let searchBox = document.getBindingParent(this);
              searchBox.searchButton.open = true;
              return false;
            }
            return true;
          ]]>
        </body>
      </method>

      <method name="onTextEntered">
        <parameter name="aEvent"/>
        <body><![CDATA[
          var evt = aEvent || this.mEnterEvent;

          let engine;
          let oneOff = this.selectedButton;
          if (oneOff) {
            if (!oneOff.engine) {
              oneOff.doCommand();
              this.mEnterEvent = null;
              return;
            }
            engine = oneOff.engine;
          }
          if (this.mEnterEvent && this._selectionDetails &&
              this._selectionDetails.currentIndex != -1) {
            BrowserSearch.searchBar.telemetrySearchDetails = this._selectionDetails;
            this._selectionDetails = null;
          }
          document.getBindingParent(this).handleSearchCommand(evt, engine);

          this.mEnterEvent = null;
        ]]></body>
      </method>

      <field name="_selectedButton"/>
      <property name="selectedButton" onget="return this._selectedButton;">
        <setter><![CDATA[
          if (this._selectedButton)
            this._selectedButton.removeAttribute("selected");

          let textbox = document.getBindingParent(this).textbox;
          let header =
            document.getAnonymousElementByAttribute(this.popup, "anonid",
                                                    "search-panel-one-offs-header");
          // Avoid selecting dummy buttons.
          if (val && !val.classList.contains("dummy")) {
            val.setAttribute("selected", "true");
            this._selectedButton = val;
            if (val.classList.contains("searchbar-engine-one-off-item")) {
              let headerEngineText =
                document.getAnonymousElementByAttribute(this.popup, "anonid",
                                                        "searchbar-oneoffheader-engine");
              header.selectedIndex = 2;
              headerEngineText.value = val.engine.name;
            }
            else {
              header.selectedIndex = textbox.value ? 1 : 0;
            }
            this.setAttribute("aria-activedescendant", val.id);
            return;
          }

          header.selectedIndex = textbox.value ? 1 : 0;
          this.removeAttribute("aria-activedescendant");
          this._selectedButton = null;
        ]]></setter>
      </property>

      <method name="getSelectableButtons">
        <parameter name="aCycleEngines"/>
        <body><![CDATA[
          let buttons = [];
          let oneOff = document.getAnonymousElementByAttribute(this.popup, "anonid",
                                                               "search-panel-one-offs");
          for (oneOff = oneOff.firstChild; oneOff; oneOff = oneOff.nextSibling) {
            if (oneOff.classList.contains("dummy"))
              break;
            buttons.push(oneOff);
          }

          if (aCycleEngines)
            return buttons;

          let addEngine =
            document.getAnonymousElementByAttribute(this.popup, "anonid", "add-engines");
          for (addEngine = addEngine.firstChild; addEngine; addEngine = addEngine.nextSibling)
            buttons.push(addEngine);

          buttons.push(document.getAnonymousElementByAttribute(this.popup, "anonid",
                                                               "search-settings"));
          return buttons;
        ]]></body>
      </method>

      <method name="advanceSelection">
        <parameter name="aForward"/>
        <parameter name="aSkipSuggestions"/>
        <parameter name="aCycleEngines"/>
        <body><![CDATA[
          let popup = this.popup;
          let list = document.getAnonymousElementByAttribute(popup, "anonid",
                                                             "search-panel-one-offs");
          let selectedButton = this.selectedButton;
          let buttons = this.getSelectableButtons(aCycleEngines);

          let suggestionsHidden;
          if (!aSkipSuggestions) {
            let suggestions = document.getAnonymousElementByAttribute(popup, "anonid", "tree");
            suggestionsHidden = suggestions.getAttribute("collapsed") == "true";
            aSkipSuggestions = suggestionsHidden;
          }

          // If the last suggestion is selected, DOWN selects the first button.
          if (!aSkipSuggestions && aForward &&
              popup.selectedIndex + 1 == popup.view.rowCount) {
            this.selectedButton = buttons[0];
            return false;
          }

          // If a one-off is selected and no suggestion is selected (or we skip them)
          if (selectedButton && (popup.selectedIndex == -1 || aSkipSuggestions)) {
            // cycle through one-off buttons.
            let index = buttons.indexOf(selectedButton);
            if (aForward)
              ++index;
            else
              --index;
            if (index >= 0 && index < buttons.length)
              this.selectedButton = buttons[index];
            else
              this.selectedButton = null;

            if (this.selectedButton || aCycleEngines || suggestionsHidden)
              return true;

            // Set the selectedIndex to something that will make
            // handleKeyNavigation (called by autocomplete.xml's onKeyPress
            // method) reset the text field value to what the user typed.
            // Doesn't work when aSkipSuggestions=true, see bug 1124747.
            if (aForward)
              popup.selectedIndex = popup.view.rowCount - 1;
            else
              popup.selectedIndex = popup.view.rowCount;
            return false;
          }

          if (!selectedButton) {
            // If no selection, select the first button or ...
            if (aForward && aSkipSuggestions) {
              this.selectedButton = buttons[0];
              return true;
            }

            if (!aForward && (aCycleEngines || suggestionsHidden ||
                              (!aSkipSuggestions && popup.selectedIndex == -1))) {
              // the last button.
              this.selectedButton = buttons[buttons.length - 1];
              return true;
            }
          }

          return false;
        ]]></body>
      </method>

      <method name="handleKeyboardNavigation">
        <parameter name="aEvent"/>
        <body><![CDATA[
          let popup = this.popup;
          if (!popup.popupOpen)
            return;

          let list = document.getAnonymousElementByAttribute(popup, "anonid",
                                                             "search-panel-one-offs");
          if (!list) // remove this check when removing the old search UI.
            return;

          // accel + up/down changes the default engine and shouldn't affect
          // the selection on the one-off buttons.
          if (aEvent.ctrlKey)
            return;

          let stopEvent = false;

          // Alt + up/down is very similar to (shift +) tab but differs in that
          // it loops through the list, whereas tab will move the focus out.
          if (aEvent.altKey &&
              (aEvent.keyCode == KeyEvent.DOM_VK_DOWN ||
               aEvent.keyCode == KeyEvent.DOM_VK_UP)) {
            stopEvent =
              this.advanceSelection(aEvent.keyCode == KeyEvent.DOM_VK_DOWN,
                                    true, true);
          }
          else if (aEvent.keyCode == KeyEvent.DOM_VK_DOWN ||
                   aEvent.keyCode == KeyEvent.DOM_VK_UP) {
            stopEvent = this.advanceSelection(aEvent.keyCode == KeyEvent.DOM_VK_DOWN);
          }
          else if (aEvent.keyCode == KeyEvent.DOM_VK_TAB) {
            stopEvent = this.advanceSelection(!aEvent.shiftKey, true);
          }

          if (stopEvent) {
            aEvent.preventDefault();
            aEvent.stopPropagation();
          }
        ]]></body>
      </method>

      <field name="searchbarController" readonly="true"><![CDATA[({
        _self: this,
        supportsCommand: function(aCommand) {
          return aCommand == "cmd_clearhistory" ||
                 aCommand == "cmd_togglesuggest";
        },

        isCommandEnabled: function(aCommand) {
          return true;
        },

        doCommand: function (aCommand) {
          switch (aCommand) {
            case "cmd_clearhistory":
              var param = this._self.getAttribute("autocompletesearchparam");

              let searchBar = this._self.parentNode;

              BrowserSearch.searchBar.FormHistory.update({ op : "remove", fieldname : param }, null);
              this._self.value = "";
              break;
            case "cmd_togglesuggest":
              // The pref observer will update _suggestEnabled and the menu
              // checkmark.
              this._self._prefBranch.setBoolPref("browser.search.suggest.enabled",
                                                 !this._self._suggestEnabled);
              break;
            default:
              // do nothing with unrecognized command
          }
        }
      })]]></field>
    </implementation>

    <handlers>
      <handler event="keypress" phase="capturing"
               action="return this.handleKeyboardNavigation(event);"/>

      <handler event="keypress" keycode="VK_UP" modifiers="accel"
               phase="capturing"
               action="document.getBindingParent(this).selectEngine(event, false);"/>

      <handler event="keypress" keycode="VK_DOWN" modifiers="accel"
               phase="capturing"
               action="document.getBindingParent(this).selectEngine(event, true);"/>

      <handler event="keypress" keycode="VK_DOWN" modifiers="alt"
               phase="capturing"
               action="return this.openSearch();"/>

      <handler event="keypress" keycode="VK_UP" modifiers="alt"
               phase="capturing"
               action="return this.openSearch();"/>

      <handler event="keypress" keycode="VK_F4"
               phase="capturing"
               action="return this.openSearch();"/>

      <handler event="dragover">
      <![CDATA[
        var types = event.dataTransfer.types;
        if (types.contains("text/plain") || types.contains("text/x-moz-text-internal"))
          event.preventDefault();
      ]]>
      </handler>

      <handler event="drop">
      <![CDATA[
        var dataTransfer = event.dataTransfer;
        var data = dataTransfer.getData("text/plain");
        if (!data)
          data = dataTransfer.getData("text/x-moz-text-internal");
        if (data) {
          event.preventDefault();
          this.value = data;
          document.getBindingParent(this).openSuggestionsPanel();
        }
      ]]>
      </handler>

    </handlers>
  </binding>

</bindings>