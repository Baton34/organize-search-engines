/* ***** BEGIN LICENSE BLOCK *****
Version: MPL 1.1/GPL 2.0/LGPL 2.1

The contents of this file are subject to the Mozilla Public License Version
1.1 (the "License"); you may not use this file except in compliance with
the License. You may obtain a copy of the License at
http://www.mozilla.org/MPL/

Software distributed under the License is distributed on an "AS IS" basis,
WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
for the specific language governing rights and limitations under the
License.

The Original Code is Organize Search Engines.

The Initial Developer of the Original Code is
Malte Kraus.
Portions created by the Initial Developer are Copyright (C) 2006-2008
the Initial Developer. All Rights Reserved.

Contributor(s):
  Malte Kraus <mails@maltekraus.de> (Original author)

 Alternatively, the contents of this file may be used under the terms of
 either the GNU General Public License Version 2 or later (the "GPL"), or
 the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 in which case the provisions of the GPL or the LGPL are applicable instead
 of those above. If you wish to allow use of your version of this file only
 under the terms of either the GPL or the LGPL, and not to allow others to
 use your version of this file under the terms of the MPL, indicate your
 decision by deleting the provisions above and replace them with the notice
 and other provisions required by the GPL or the LGPL. If you do not delete
 the provisions above, a recipient may use your version of this file under
 the terms of any one of the MPL, the GPL or the LGPL.
***** END LICENSE BLOCK ***** */

#include "nsISupports.idl"

interface nsIRDFContainer;
interface nsIRDFResource;
interface nsIInputStream;
interface nsISearchEngine;

[scriptable, uuid(e4e6e165-81e7-44fb-a027-8b606c865b00)]
interface nsISEOrganizer : nsISupports {
  /* Get the root element of the rdf graph. */
  nsIRDFResource getRoot();

  /* Check whether a node is a folder. */
  boolean isFolder(in nsIRDFResource folder);
  /**
   * Create a new Folder.
   *
   * @param name The name of the folder to create.
   * @param parent The parent nsIRDFResource or null for the root.
   *
   * @return The new Folder.
   */
  nsIRDFResource newFolder(in AString name, in nsISupports parent);

  /* Check whether a node is a separator. */
  boolean isSeparator(in nsIRDFResource separator);
  /**
   * Create a new Separator.
   *
   * @param parent The parent nsIRDFResource or null for the root.
   *
   * @return The new separator.
   */
  nsIRDFResource newSeparator(in nsISupports parent);

  /**
   * Removes an engine/separator/folder and all references to it.
   *
   * @param item     The item to remove.
   * @param recourse Also remove children? If false, the caller has to make sure
   *                 no unwanted engines are duplicated or removed
   */
  void removeItem(in nsIRDFResource item, in boolean recourse);


  /**** Item/Name/Index handling ****/
  /* Returns whether an item with a specific name exists. */
  boolean itemWithNameExists(in AString name);
  /* Returns the (string) name of a given item. */
  AString getNameByItem(in nsIRDFResource item);
  /* Returns the item with a given name.            *
   * @return The item or null if it does not exist. */
  nsIRDFResource getItemByName(in AString name);

  /* Get an item from a given index. */
  nsIRDFResource getItemByIndex(in long index);
  /* Returns the icon URI of the engine with a given index. */
  AString getIconByIndex(in long index);
  /**
   * Determine the index of an item.
   *
   * @param item   The item of which you want the index.
   * @param global True if the index should be a global index, false if the
   *               index is to be relative to the parent container
   */
  long indexOf(in nsIRDFResource item, in boolean global);

  /* Determine how many children a given container has.                       *
   * Including grand-children. (For the number of direct children, use        *
   * nsIRDFContainer.)                                                        */
  long getChildCount(in nsIRDFResource item);

  /* returns item's parent folder */
  nsIRDFResource getParent(in nsIRDFResource item);

  /* Provides the API to use search aliases in Firefox. Has to be in the xpcom *
   * service because the out-parameter can't be imitated with pure javascript. */
  string resolveKeyword(in wstring name, out nsIInputStream postData);

   /* returns a multi-engine wrapping multiple nsISearchEngines. these can be  *
    * used by QI'ing the submission to nsISimpleEnumerator and using the       *
    * enumerated nsISearchSubmissions (e.g. open these in tabs)                */
  nsISearchEngine folderToEngine(in nsIRDFResource item);

  /* Save the changes. */
  void saveChanges();
  /* Reload the datasource from disk */
  void reload();
};